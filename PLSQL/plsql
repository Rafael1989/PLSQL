#CRIAR USUÁRIO
CREATE USER cursoplsql IDENTIFIED BY cursoplsql
                       DEFAULT tablespace users;
                       
#DAR PERMISSÃO PARA O USUÁRIO
GRANT connect, resource TO cursoplsql;

#CRIAR TABELA
CREATE TABLE SegMercado(ID NUMBER(5),Descricao VARCHAR2(100));
CREATE TABLE Cliente
  ( ID NUMBER(5),
    Razao_Social VARCHAR2(100),
    CNPJ VARCHAR2(20),
    SegMercado_id NUMBER(5),
    Data_Inclusao DATE,
    #8 INTEIRO E 2 DECIMAIS
    Faturamento_Previsto NUMBER(10,2),
    Categoria VARCHAR2(20));

#NÃO DEIXAR ID NULO OU REPETIDO
ALTER TABLE Segmercado ADD CONSTRAINT SegMercado_id_pk PRIMARY KEY(ID);
ALTER TABLE Cliente ADD CONSTRAINT Cliente_id_pk PRIMARY KEY(ID);

#ADICIONA CHAVE ESTRANGEIRA
ALTER TABLE Cliente ADD CONSTRAINT Cliente_SegMercado_fk FOREIGN KEY(SegMercado_id) REFERENCES Segmercado(id) ;

#BLOCO PL/SQL

#LIGA VARIAVEL
SET SERVEROUTPUT ON

#DECLARAR VARIAVEIS
DECLARE
    v_id number(5) := 1;

#INÍCIO DO BLOCO
BEGIN
    v_id := 2;
    
    #IMPRIME NO CONSOLE
    Dbms_output.put_line(v_id);

#FIM DO BLOCO
END;

#BLOCO INSERT PL/SQL
DECLARE
    v_id number(5) := 1;
    v_descricao varchar2(100) := 'varejo';

BEGIN

    INSERT INTO segmercado VALUES (v_id, v_descricao);
    COMMIT;

END;

#BLOC PL/SQL SEM TIPOS(BOA PRÁTICA) + UPPERCASE
DECLARE
    v_id segmercado.id%type := 3;
    v_descricao segmercado.descricao%type := 'atacado';
BEGIN
    INSERT INTO SEGMERCADO VALUES (v_id,upper(v_descricao));
    COMMIT;
END;

#UPDATE
DECLARE
    v_id segmercado.id%type := 1;
    v_descricao segmercado.descricao%type := 'varejista';
BEGIN
    UPDATE SEGMERCADO SET DESCRICAO = UPPER(v_descricao) WHERE id = v_id;
    
    v_id := 2;
    v_descricao := 'atacadista';
    
    UPDATE SEGMERCADO SET DESCRICAO = UPPER(v_descricao) WHERE id = v_id;
    COMMIT;
END;

#DELETE
DECLARE
    v_id segmercado.id%type := 3;
BEGIN
    DELETE FROM SEGMERCADO WHERE id = v_id;
    COMMIT;
END;


#CRIAR PROCEDURE
CREATE PROCEDURE incluir_segmercado(p_id IN NUMBER, p_descricao IN VARCHAR2)
IS
BEGIN
    INSERT INTO SEGMERCADO VALUES(p_id,UPPER(p_descricao));
    COMMIT;
END;


#CRIAR FUNCTION
CREATE OR REPLACE FUNCTION obter_descricao_segmercado (p_id IN segmercado.id%type)
RETURN segmercado.descricao%type

IS
    v_descricao segmercado.descricao%type;

BEGIN
    SELECT descricao INTO v_descricao
        FROM segmercado
        WHERE id = p_id;
    RETURN v_descricao;
END;

#PROCEDURE COM IF
CREATE OR REPLACE PROCEDURE INCLUIR_CLIENTE 
   (p_id in cliente.id%type,
    p_razao_social IN cliente.razao_social%type,
    p_CNPJ cliente.CNPJ%type ,
    p_segmercado_id IN cliente.segmercado_id%type,
    p_faturamento_previsto IN cliente.faturamento_previsto%type)
IS
    v_categoria cliente.categoria%type;

BEGIN

    IF p_faturamento_previsto < 10000 THEN
       v_categoria := 'PEQUENO';
        ELSIF p_faturamento_previsto < 50000 THEN
        v_categoria := 'MEDIO';
        ELSIF p_faturamento_previsto < 100000 THEN
        v_categoria := 'MEDIO GRANDE';
        ELSE
        v_categoria := 'GRANDE';
        END IF;

    INSERT INTO cliente VALUES (p_id, UPPER(p_razao_social), p_CNPJ,p_segmercado_id, SYSDATE, p_faturamento_previsto, v_categoria);
    COMMIT;

END;

#CRIAR FUNCTION
CREATE OR REPLACE FUNCTION categoria_cliente (p_faturamento_previsto IN cliente.faturamento_previsto%type) RETURN cliente.categoria%type

IS
BEGIN

    IF p_faturamento_previsto < 10000 THEN
           RETURN 'PEQUENO';
        ELSIF p_faturamento_previsto < 50000 THEN
            RETURN 'MEDIO';
        ELSIF p_faturamento_previsto < 100000 THEN
            RETURN 'MEDIO GRANDE';
        ELSE
            RETURN 'GRANDE';
        END IF;
END;

#PROCEDURE PARA FORMATAR CNPJ
CREATE OR REPLACE PROCEDURE FORMAT_CNPJ
    (p_cnpj IN OUT cliente.CNPJ%type)

IS
BEGIN
    p_cnpj := substr(p_cnpj,1,2) || '/' || substr(p_cnpj,3);
END;

#DECLARANDO, SETANDO E EXIBINDO VARIAVEL
VARIABLE g_cnpj varchar2(10)
EXECUTE :g_cnpj := '12345'
PRINT g_cnpj

EXECUTE FORMAT_CNPJ(:g_cnpj)
PRINT g_cnpj


#FORMATANDO CNPJ NA PROCEDURE DE INCLUIR CLIENTE
CREATE OR REPLACE PROCEDURE INCLUIR_CLIENTE 
   (p_id in cliente.id%type,
    p_razao_social IN cliente.razao_social%type,
    p_CNPJ cliente.CNPJ%type ,
    p_segmercado_id IN cliente.segmercado_id%type,
    p_faturamento_previsto IN cliente.faturamento_previsto%type)
IS
    v_categoria cliente.categoria%type;
    v_CNPJ cliente.cnpj%type := p_CNPJ;

BEGIN

    v_categoria := categoria_cliente(p_faturamento_previsto);

    format_cnpj(v_cnpj);

    INSERT INTO cliente VALUES (p_id, UPPER(p_razao_social), v_CNPJ ,p_segmercado_id, SYSDATE, p_faturamento_previsto, v_categoria);
    COMMIT;

END;

#PROCEDURE UPDATE
CREATE OR REPLACE PROCEDURE ATUALIZAR_CLI_SEG_MERCADO
    (p_id IN cliente.id%type,
     p_segmercado_id IN cliente.segmercado_id%type)
    IS
BEGIN
    UPDATE cliente
        SET segmercado_id = p_segmercado_id
        WHERE id = p_id;
    COMMIT;
END;

#EXECUTANDO A PROCEDURE
DECLARE
    v_segmercado_id cliente.segmercado_id%type := 1;
    v_i number(3);
BEGIN
    v_i := 1;
LOOP
    ATUALIZAR_CLI_SEG_MERCADO(v_i, v_segmercado_id);
    v_i := v_i +1;
    EXIT WHEN v_i > 3;
 END LOOP;
END;

#USANDO O FOR LOOP
DECLARE
    v_segmercado_id cliente.segmercado_id%type := 2;
BEGIN
    FOR i in 1..3 LOOP
        ATUALIZAR_CLI_SEG_MERCADO(i, v_segmercado_id);
    END LOOP;
     COMMIT;
END;

#USANDO CURSOR
DECLARE
    v_segmercado_id cliente.segmercado_id%type := 3;
    v_id cliente.id%type;
    CURSOR cur_cliente is SELECT id from cliente; 
BEGIN
    OPEN cur_cliente;
    LOOP
       FETCH cur_cliente into v_id;
       EXIT WHEN cur_cliente%NOTFOUND;
       ATUALIZAR_CLI_SEG_MERCADO(v_id, v_segmercado_id);
    END LOOP;
END;

#CURSOR FOR LOOP
DECLARE
    v_segmercado_id cliente.segmercado_id%type := 2;
    v_id cliente.id%type;
    CURSOR cur_cliente is SELECT id from cliente; 
BEGIN
    FOR cli_rec IN cur_cliente LOOP
       ATUALIZAR_CLI_SEG_MERCADO(cli_rec.id, v_segmercado_id);
    END LOOP;
END;

#CHAMANDO PROCEDURE DE FORMA NOMEADA
DECLARE 
    v_id NUMBER;
    v_segmercado_id NUMBER;
BEGIN
    v_id := 1;
    v_segmercado_id := 3;
    atualizar_cli_seg_mercado(p_id => v_id, p_segmercado_id => v_segmercado_id);
END;